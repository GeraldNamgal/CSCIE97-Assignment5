

=====================================================================================================================

# Define Permissions
define permission \"use Modeler API\" \"User Modeler API\" \"Use any of the Model Service API methods\"
define permission \"control robot\" \"Control Robot\" \"Full Control of Robots\"
define permission \"control speaker\" \"Control Speaker\" \"Full Control of Speaker\"
define permission \"control turnstile\" \"Control Turnstile\" \"Full Control of Turnstile\"
define permission \"enter store\" \"Enter Store\" \"Can enter store(s)\"
define permission \"checkout\" \"Checkout\" \"Can check out items from store(s)\"

# Define Roles
define role \"adult consumer\" \"Adult Consumer Role\" \"Has all permissions of an adult consumer\"
define role \"child consumer\" \"Child Consumer Role\" \"Has all permissions of a child consumer\"
define role guest \"Guest Role\" \"Has all permissions of a guest\"
define role \"Model Service API admin\" \"Store Model Service Admin Role\" \"Has all permissions of a Model Service admin\"

# Define resource store 1
define resource \"store1\" \"Represents store1 Store\"
define resource \"store2\" \"Represents store2 Store\"

# Define resource roles
define resource role \"store1 child consumer\" \"name\" \"description\" \"child consumer\" \"store1\"
define resource role \"store1 adult consumer\" \"name\" \"description\" \"adult consumer\" \"store1\"
define resource role \"store2 adult consumer\" \"name\" \"description\" \"adult consumer\" \"store2\"

# Add Permissions to Roles
add entitlement to role \"Model Service API admin\" \"use Modeler API\"
add entitlement to role \"Model Service API admin\" \"control robot\"
add entitlement to role \"Model Service API admin\" \"control speaker\"
add entitlement to role \"Model Service API admin\" \"control turnstile\"
add entitlement to role \"adult consumer\" \"control robot\"
add entitlement to role \"adult consumer\" \"enter store\"
add entitlement to role \"adult consumer\" checkout
add entitlement to role \"child consumer\" \"enter store\"
add entitlement to role \"child consumer\" checkout
add entitlement to role guest \"enter store\"

# Define Users
define user customer1 \"Customer 1\"
define user customer2 \"Customer 2\"
define user customer3 \"Customer 3\"
define user customer5 \"Customer 5\"
define user customer6 \"Customer 6\"

# Add roles to users
add entitlement to user customer1 \"store1 adult consumer\"
add entitlement to user customer2 guest
add entitlement to user customer3 \"store1 child consumer\"
add entitlement to user customer5 \"store2 adult consumer\"
add entitlement to user customer6 \"store2 adult consumer\"

# Add permission to user
add entitlement to user customer5 \"enter store\"

# Add Credentials to Users
add user credential customer1 voiceprint --voice:customer1--
add user credential customer1 faceprint --face:customer1--
add user credential customer2 voiceprint --voice:customer2--
add user credential customer2 faceprint --face:customer2--
add user credential customer3 voiceprint --voice:customer3--
add user credential customer3 faceprint --face:customer3--
add user credential customer5 faceprint --face:customer5--
add user credential customer5 voiceprint --voice:customer5--
add user credential customer6 faceprint --face:customer6--
add user credential customer6 voiceprint --voice:customer6--

# Exception: Try to have CommandProcessor define store 1 (i.e., use Store Model Service) without required permission
define store \"store1\" name \"Harvard Square Store\" address \"1400 Mass Avenue, Cambridge, MA 02138\"

# Give hardcodedUser (the User that CommandProcessor is logged in as) Model Service admin role
add entitlement to user hardcodedUser \"Model Service API admin\"

# Print inventory (hardcodedUser should now have \"Model Service API admin\" role)
print inventory

# Define store 1 (CommandProcessor/hardcodedUser should now have permission to)
define store \"store1\" name \"Harvard Square Store\" address \"1400 Mass Avenue, Cambridge, MA 02138\"

# Define the rest of store 1's assets
define aisle store1:aisle1 name Milks description \"milk, yogurt, and other dairy-like products\" location floor
define aisle store1:aisle2 name \"Breads and Grains\" description \"breads, grains, wheat\" location floor
define aisle store1:aisle3 name Drinks description \"canned and room temperature\" location floor
define aisle store1:aisle5 name Miscellaneous description \"random stuff\" location storeroom
define shelf store1:aisle1:shelf1 name Milks level high description \"regular, soy, and almond\" temperature refrigerated
define shelf store1:aisle5:shelf1 name Milks level high description \"regular, soy and almond\" temperature refrigerated
define shelf store1:aisle2:shelf2 name \"Cereals\" level high description \"cereal and oatmeal\"
define shelf store1:aisle5:shelf2 name \"Cereals\" level high description \"cereal and oatmeal\"
define product product1 name \"Soya Drink\" description \"soy milk brand\" size \"2 lbs\" category \"milk\" unit_price 35 temperature refrigerated
define inventory inventory1 location store1:aisle1:shelf1 capacity 30 count 30 product product1
define inventory inventory2 location store1:aisle5:shelf1 capacity 30 count 30 product product1
define product product2 name \"Almond Drank\" description \"almond milk brand\" size \"2 lbs\" category \"milk\" unit_price 40 temperature refrigerated
define inventory inventory3 location store1:aisle1:shelf1 capacity 40 count 40 product product2
define inventory inventory4 location store1:aisle5:shelf1 capacity 40 count 40 product product2
define product product3 name \"Crunchy Cereal\" description \"breakfast cereal\" size \"1 lbs\" category \"breakfast food\" unit_price 27
define inventory inventory5 location store1:aisle2:shelf2 capacity 35 count 35 product product3
define inventory inventory6 location store1:aisle5:shelf2 capacity 35 count 35 product product3
define device camera1 name \"camera 1\" type camera location store1:aisle1
define device camera2 name \"camera 2\" type camera location store1:aisle2
define device camera3 name \"camera 3\" type camera location store1:aisle3
define device camera4 name \"camera 4\" type camera location store1:null
define device camera5 name \"camera 5\" type camera location store1:aisle5
define device microphone1 name \"microphone 1\" type microphone location store1:aisle1
define device microphone2 name \"microphone 2\" type microphone location store1:aisle2
define device microphone3 name \"microphone 3\" type microphone location store1:aisle3
define device microphone4 name \"microphone 4\" type microphone location store1:null
define device turnstile1 name \"turnstile 1\" type turnstile location store1:null
define device turnstile2 name \"turnstile 2\" type turnstile location store1:null
define device turnstile3 name \"turnstile 3\" type turnstile location store1:null
define device speaker1 name \"speaker 1\" type speaker location store1:aisle1
define device speaker2 name \"speaker 2\" type speaker location store1:aisle2
define device speaker3 name \"speaker 3\" type speaker location store1:aisle3
define device robot1 name \"robot 1\" type robot location store1:null
define device robot2 name \"robot 2\" type robot location store1:null
define device robot3 name \"robot 3\" type robot location store1:null
define customer customer1 first_name John last_name Jones age_group adult type registered email_address john.j@jmail.com account john
define customer customer2 first_name Stephanie last_name Jones age_group child type guest email_address steph.j@jmail.com account stephanie
define customer customer3 first_name Mark last_name Jones age_group child type registered email_address mark.j@jmail.com account mark
define customer customer4 first_name Mary last_name Stein age_group adult type registered email_address mary.s@jmail.com account mary
define customer customer5 first_name Joseph last_name McAllister age_group adult type registered email_address joseph.m@jmail.com account joseph
define customer customer6 first_name Stan last_name Jenkins age_group adult type registered email_address stan.j@jmail.com account stan
define customer customer7 first_name Jalina last_name White age_group adult type registered email_address jalina.w@jmail.com account jalina
define customer customer8 first_name Sebastian last_name Kim age_group adult type registered email_address sebastian.k@jmail.com account sebastian
define customer customer9 first_name Lisa last_name Ford age_group adult type registered email_address lisa.f@jmail.com account lisa
define customer customer10 first_name Art last_name Weyl age_group adult type registered email_address art.w@jmail.com account art
define customer customer11 first_name Karen last_name Peterson age_group adult type registered email_address karen.p@jmail.com account karen

# Create ledger, Blockchain accounts, and initial fund transactions
Create-ledger ledger description \"for blockchaining\" seed \"CSCIE-97\"
create-account store1
create-account john
process-transaction 0 amount 2000 fee 10 payload \"fund account\" payer master receiver john
create-account mark
process-transaction 1 amount 2000 fee 10 payload \"fund account\" payer master receiver mark
create-account mary
process-transaction 2 amount 0 fee 10 payload \"fund account\" payer master receiver mary
create-account joseph
process-transaction 3 amount 2000 fee 10 payload \"fund account\" payer master receiver joseph
create-account stan
process-transaction 4 amount 2000 fee 10 payload \"fund account\" payer master receiver stan
create-account jalina
process-transaction 5 amount 2000 fee 10 payload \"fund account\" payer master receiver jalina
create-account sebastian
process-transaction 6 amount 2000 fee 10 payload \"fund account\" payer master receiver sebastian
create-account lisa
process-transaction 7 amount 2000 fee 10 payload \"fund account\" payer master receiver lisa
create-account art
process-transaction 8 amount 2000 fee 10 payload \"fund account\" payer master receiver art
create-account karen
process-transaction 9 amount 2000 fee 10 payload \"fund account\" payer master receiver karen

# Exception: Create an Emergency event when Controller does not have permission to access any Model Services yet
create event camera1 event \"emergency fire aisle1\"

# Create an Authenticator User for the Controller Service
define user controller \"The Controller\"

# Add credential to Controller user
add user credential controller password password

# Add Model Service API admin role to Controller user
add entitlement to user controller \"Model Service API admin\"

# Login Controller user
login to authenticator controller

# Print inventory (controller should be listed as a User with Permissions included)
print inventory

# Create an Emergency event (Controller now has permissions to handle the event appropriately)
create event camera1 event \"emergency fire aisle1\"

# Enter Store event for customer1 (registered adult customer at store1 aka \"Harvard Square Store\")
create event turnstile2 event \"enter_store customer1\"

# Exception: Have customer6 attempt to enter store 1 (only has permission to shop at store 2)
create event turnstile1 event \"enter_store customer6\"

# Enter Store event for customer2 (a guest)
create event turnstile2 event \"enter_store customer2\"

# Enter Store event for customer3 (registered child customer at store1)
create event turnstile3 event \"enter_store customer3\"

# Exception: customer5 can enter store1 but can't checkout at store1 so isn't assigned a basket
create event turnstile1 event \"enter_store customer5\"

# Basket Items event (customer 3 adds 2 of product 1 to their basket)
create event camera1 event \"basket_items customer3 add product1 2 aisle1:shelf1\"

# Basket Items event (customer 1 adds 6 of product 1 to their basket)
create event camera1 event \"basket_items customer1 add product1 6 aisle1:shelf1\"

# Basket Items event (customer 1 removes 6 of product 1 from their basket)
create event camera1 event \"basket_items customer1 remove product1 6 aisle1:shelf1\"

# Clean event
create event camera1 event \"clean product1 aisle1\"

# Customer Seen event for customer 1
create event camera3 event \"customer_seen customer1 aisle3\"

# Fetch Product event
create event microphone3 event \"fetch_product product2 6 aisle1:shelf1 customer1 --voice:customer1--\"

# Exception: Customer 1 commands robot to fetch a product again with erroneous credential value
create event microphone3 event \"fetch_product product2 6 aisle1:shelf1 customer1 -+voice:customer1@-\"

# Exception: Have Customer 3 attempt to command a robot to fetch a product (doesn't have permission as a child)
create event microphone3 event \"fetch_product product2 1 aisle1:shelf1 customer3 --voice:customer3--\"

# Checkout event for customer 1 (a registered adult customer)
create event turnstile1 event \"checkout customer1\"

# Checkout event for customer 2 (a guest)
create event turnstile1 event \"checkout customer2\"

# Checkout event for customer 3 (a registered child customer)
create event turnstile2 event \"checkout customer3\"

# Show block 2 from ledger (customer transactions should be reflected)
get-block 2

# Exception: Attempt to have an unregistered/unknown person enter the store
create event turnstile2 event \"enter_store unknownPerson\"
